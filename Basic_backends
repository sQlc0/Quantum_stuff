from qiskit import *
import numpy as np

circ = QuantumCircuit(3)
circ.h(0)
circ.cx(0,1)
circ.cx(0,2)

###################################
backend = Aer.get_backend('statevector_simulator')
jobs = backend.run(circ)
result = job.result()
outputstate = result.get_statevector(circ, decimals=3)
print(outputstate)

from qiskit.visualization import plot_state_city
plot_state_city(outputstate)

#########################################################

backend = Aer.get_backend('unitary_simulator')
job = backend.run(circ)
result = job.result()

print(result.get_unitary(circ, decimals=3))

#######################################################

meas = QuantumCircuit(3,3)
meas.barrier(range(3))

meas.measure(range(3), range(3)

circ.add_register(meas.cregs[0])
qc = circ.compose(meas)

qc.draw()

##############################################################

backend_sim = Aer.get_backend('qasm_simulator')
joo_sim = backend_sim.run(transpile(qc, backend_sim), shots=1000)

result_sim = job_sim.result()
counts = result_sim.get_counts(qc)

from qiskit.visualization import plot_histogram
plot_histogram(counts)

